// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ //
//
//                ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀                  //
//                ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄             //
//                █   █  █  █   █  █  █   █  █  █   █             //
//                 ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀              //
//                       █      ▄▄▄█▄▄▄    █   █                  //
//                       ▀      █  █  █     █▄█                   //
//                     ▀▀▀▀▀    █  █  █      ▀                    //
//                              ▀  ▀  ▀                           //
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ //

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define LAYONE  1
#define LAYTWO  2
#define ADJ  3

&mt {
    quick-tap-ms = <100>;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };

        combo_play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <4 3>;
            layers = <0>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 11>;
            layers = <0>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <2 12>;
            layers = <0>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <3 13>;
            layers = <0>;
        };

        combo_ampberstand {
            bindings = <&kp AMPS>;
            key-positions = <4 14>;
            layers = <0>;
        };

        combo_cmd_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            layers = <0>;
        };

        combo_arrow {
            bindings = <&macro_arrow>;
            key-positions = <12 13>;
            layers = <1>;
        };
    };

    behaviors {
        // https://www.reddit.com/r/zmk/comments/12ujlmb/combing_modmorph_and_layer_tap/

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BSPC)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_bspc: layer_tap_bspc_del {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_BACKSPACE_DELETE";
            #binding-cells = <2>;
            bindings = <&mo>, <&bspc_del>;

            tapping-term-ms = <200>;
        };

        tap_macro: tap_macro {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_MACRO";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&macro_dollar_curly>;

            tapping-term-ms = <200>;
        };
    };

    macros {
        macro_arrow: macro_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "MACRO_ARROW";
        };

        macro_dollar_curly: macro_dollar_curly {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOLLAR &kp LEFT_BRACE>;
            label = "MACRO_DOLLAR_CURLY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base Layer";
            bindings = <
                       &kp Q  &kp W  &kp E     &kp R                 &kp T                   &kp Y                  &kp U             &kp I                &kp O    &kp P
                       &kp A  &kp S  &kp D     &kp F                 &kp G                   &kp H                  &kp J             &kp K                &kp L    &kp SEMICOLON
&mt LEFT_SHIFT ESCAPE  &kp Z  &kp X  &kp C     &kp V                 &kp B                   &kp N                  &kp M             &kp COMMA            &kp DOT  &kp SLASH      &mt RIGHT_SHIFT SQT
                                     &kp LGUI  &lt_bspc LAYONE BASE  &mt LEFT_SHIFT SPACE    &mt RIGHT_SHIFT SPACE  &lt LAYTWO ENTER  &mt RIGHT_ALT MINUS
            >;
        };

        LAYONE {
            label = "Layer One";
            bindings = <
        &kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3   &kp NUMBER_4       &kp NUMBER_5        &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
        &trans        &trans            &kp EQUAL      &tap_macro         &kp LEFT_BRACKET    &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &trans
&trans  &trans        &kp LA(LC(LEFT))  &kp LA(LC(C))  &kp LA(LC(RIGHT))  &kp LESS_THAN       &trans        &trans        &trans        &trans        &trans        &trans
                                        &trans         &trans             &trans              &trans        &trans        &trans
            >;
        };

        LAYTWO {
            label = "Layer Two";
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp RIGHT_BRACKET      &trans  &kp RA(RG(I))  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &kp RIGHT_PARENTHESIS  &trans  &trans         &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp PIPE               &trans  &trans         &trans  &trans  &trans
                        &trans  &trans  &trans    &trans                 &trans  &trans
            >;
        };

        ADJUST {
            label = "Adjustment layer";
            bindings = <
        &bt BT_SEL 0  &bt BT_SEL 3  &trans  &kp LA(LC(U))  &kp LA(LC(I))    &trans                 &trans             &kp RG(BACKSLASH)  &trans  &trans
        &bt BT_SEL 1  &trans        &trans  &kp LA(LC(J))  &kp LA(LC(K))    &kp LA(LC(LG(RIGHT)))  &kp LA(LC(ENTER))  &trans             &trans  &trans
&trans  &bt BT_SEL 2  &trans        &trans  &trans         &trans           &trans                 &trans             &trans             &trans  &trans  &trans
                                    &trans  &trans         &trans           &trans                 &trans             &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        ADJUST_LAYER {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
